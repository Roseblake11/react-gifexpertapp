{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,cAE3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACE,sBAAMC,SAVa,SAACC,GACpBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAKhB,SACE,uBACMO,KAAK,OACLC,MAAQT,EACRU,SAlBgB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,+BCNbG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEhBC,EAFgB,iDAEiCC,UAAUH,GAF3C,+DAGHI,MAAMF,GAHH,cAGhBG,EAHgB,gBAIDA,EAAKC,OAJJ,uBAIfC,EAJe,EAIfA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAO,IAAD,EAC3B,MAAO,CACLC,GAAGD,EAAIC,GACPC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVhB,kBAcfM,GAde,4CAAH,sDCDRO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAGvC,OACI,sBAAKc,UAAU,6CAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCJCO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAEvB,ECF0B,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAqBA,OAhBAC,qBAAW,WAEPxB,EAASC,GACJwB,MAAM,SAAAC,GAEHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAItB,CAACpB,IAKGqB,EDrBwBK,CAAa1B,GAAjCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAErB,OACE,eAAC,WAAD,WACE,oBAAIJ,UAAU,wCAAd,SAAuDhB,IACvD,uBACCoB,GAAW,mBAAGJ,UAAU,mCAAb,qBACV,qBAAKA,UAAU,YAAf,SAEIH,EAAOJ,KAAK,SAAAC,GAAG,OACb,cAAC,EAAD,eAEMA,GADCA,EAAIC,SAMnB,2BEnBOgB,EAAe,WAE1B,MAAoCzC,mBAAS,CAAC,WAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAEA,OACE,eAAC,WAAD,WACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEI2C,EAAWnB,KAAK,SAAAT,GAAQ,OACrB,cAAC,EAAD,CAEGA,SAAUA,GADLA,Y,MCXrB6B,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.7e5cca9f.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n// import { useState } from 'react/cjs/react.development';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories})=> {\r\n\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const handleInputchange = (e) =>{\r\n    setInputValue(e.target.value);\r\n  }\r\n\r\n  const handleSubmit = (e) =>{\r\n    e.preventDefault();\r\n\r\n    if(inputValue.trim().length > 1){\r\n      setCategories( cats => [inputValue, ...cats]);\r\n      setInputValue('');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input \r\n            type=\"text\"\r\n            value={ inputValue }\r\n            onChange={handleInputchange}/>\r\n    </form>\r\n  )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n}","\r\n\r\n\r\n export const getGifs = async(category) => {\r\n\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=Ud1mkZHti2L1mqP3kpoVNOPewmx0adq3`;\r\n  const resp = await fetch(url);\r\n  const {data} = await resp.json();\r\n  \r\n  const gifs = data.map( img =>{\r\n    return {\r\n      id:img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url\r\n    }\r\n  })\r\n  \r\n  return gifs;\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( {id, title, url} ) => {\r\n\r\n\r\n  return (\r\n      <div className=\"card animate__animated animate__backInLeft\">\r\n        <img src={url} alt={title}/>\r\n        <p>{title}</p>\r\n      </div>\r\n  )\r\n}\r\n","import React, { Fragment } from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n  const { data:images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <Fragment>\r\n      <h3 className='animate__animated animate__backInDown'>{category}</h3>\r\n      <hr/>\r\n      {loading && <p className='animate__animated animate__flash'>Loading</p>}\r\n        <div className=\"card-grid\">\r\n          {\r\n            images.map( img =>(\r\n              <GifGridItem \r\n                key={img.id}\r\n                {...img }\r\n              />\r\n            ))\r\n          }\r\n        </div>\r\n      <hr/>\r\n    </Fragment>\r\n  )\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n\r\n        getGifs( category )\r\n            .then( imgs => {\r\n                \r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            })\r\n\r\n    }, [category])\r\n\r\n\r\n\r\n\r\n    return state; // { data:[], loading: true };\r\n\r\n\r\n}\r\n\r\n\r\n","import React, { Fragment, useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n  const [categories, setCategories] = useState(['Gundam']);\r\n\r\n  return (\r\n    <Fragment>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr></hr>\r\n\r\n      <ol>\r\n        {\r\n          categories.map( category =>\r\n             <GifGrid \r\n                key={category}\r\n                category={category} />\r\n             )\r\n        }\r\n      </ol>\r\n\r\n    </Fragment>\r\n  )\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {GifExpertApp} from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}